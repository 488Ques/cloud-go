// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO Post (
    id,
    title,
    content,
    created_at
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, title, content, created_at
`

type CreatePostParams struct {
	ID        pgtype.UUID      `json:"id"`
	Title     pgtype.Text      `json:"title"`
	Content   pgtype.Text      `json:"content"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deletePosts = `-- name: DeletePosts :exec
DELETE FROM Post
WHERE id = $1
`

func (q *Queries) DeletePosts(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePosts, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, created_at FROM Post
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, content, created_at FROM Post
ORDER BY title
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePosts = `-- name: UpdatePosts :one
UPDATE Post
  SET title = $2,
  content = $3,
  created_at = $4
WHERE id = $1
RETURNING id, title, content, created_at
`

type UpdatePostsParams struct {
	ID        pgtype.UUID      `json:"id"`
	Title     pgtype.Text      `json:"title"`
	Content   pgtype.Text      `json:"content"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) UpdatePosts(ctx context.Context, arg UpdatePostsParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePosts,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.CreatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
